#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

def product = "pip"
def component = "shared-infrastructure"

def setupTerraformSecret() {

  def bootstap_env = "sbox"
  def secret_env = env.ENV == "prod" ? "-prod" : ""

  azureKeyVault(
    keyVaultURL: "https://pip-bootstrap-${bootstap_env}-kv.vault.azure.net/",
    secrets: [
      secret("b2c-jenkins${secret_env}-client-secret", 'B2C_CLIENT_SECRET'),
      secret("b2c-jenkins${secret_env}-client-id", 'B2C_CLIENT_ID'),
      secret("b2c-jenkins${secret_env}-tenant-id", 'B2C_TENANT_ID'),
      secret('pip-frontend-github-object-id', "GITHUB_RUNNER_OBJECT_ID")
    ]) {
    env.TF_VAR_B2C_CLIENT_SECRET = "${B2C_CLIENT_SECRET}"
    env.TF_VAR_B2C_TENANT_ID = "${B2C_TENANT_ID}"
    env.TF_VAR_B2C_CLIENT_ID = "${B2C_CLIENT_ID}"
    env.TF_VAR_GITHUB_RUNNER_OBJECT_ID = "${GITHUB_RUNNER_OBJECT_ID}"
  }
}

static Map<String, Object> secret(String secretName, String envVariable) {
  [
    $class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    envVariable: envVariable
  ]
}

withParameterizedInfraPipeline(product, "sbox", "sbox", component) {

 onMaster() {
    env.ENV = 'stg'
  }
  onPR() {
    env.ENV = 'dev'
  }
  onDemo {
    env.ENV = 'demo'
  }
  onPerftest {
    env.ENV = 'perftest'
  }
  onIthc {
    env.ENV = 'ithc'
  }
  setupTerraformSecret()
}
