#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure@debug-infra") _

def product = "pip"
def component = "shared-infrastructure"

def setupTerraformSecret() {

  def bootstap_env = env.ENV == "prod" || env.ENV == "demo" || env.ENV == "sbox" ? env.ENV : "stg"

  azureKeyVault(
    keyVaultURL: "https://pip-bootstrap-${bootstap_env}-kv.vault.azure.net/",
    secrets: [
      secret('b2c-client-secret', 'B2C_CLIENT_SECRET')
    ]) {
    env.TF_VAR_B2C_CLIENT_SECRET = "${B2C_CLIENT_SECRET}"
  }
}

static Map<String, Object> secret(String secretName, String envVariable) {
  [
    $class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    envVariable: envVariable
  ]
}

static void unlockRg(){
  def envName="stg"
  //sh "echo unlock RG stg"
  sh "rgName='pip-ss-stg-rg'"
  sh "lockName='stg-lock'"
  sh "echo 'Get \$lockName lock from \$rgName'"
  sh "lock=\$(az lock show --name \$lockName --resource-group \$rgName)"
  sh (
    """
        if [[ \$lock != '' ]]; then
          echo 'Delete Lock \$lockName on \$rgName'
          az lock delete --name \$lockName --resource-group \$rgName
        else
          echo "\$lockName on \$rgName not found"
        fi
      """
  )
}

def branchesToSync = ['demo', 'perftest', 'ithc']

withInfraPipeline(product, component) {
 syncBranchesWithMaster(branchesToSync)

 onMaster() {
    env.ENV = 'stg'
  }
  onPR() {
    env.ENV = 'dev'
  }
  onDemo {
    env.ENV = 'demo'
  }
  onPerftest {
    env.ENV = 'perftest'
  }
  onIthc {
    env.ENV = 'ithc'
  }
  setupTerraformSecret()

  before('buildinfra:stg') {
    sh "echo 'unlock RG stg try'"
    sh "environment='stg'"
    unlockRg()
  }
  before('buildinfra:prod') {
    unlockRg()
  }
}

